{"version":3,"sources":["square.js","board.js","index.js"],"names":["Square","props","className","isWinningSquare","onClick","value","Board","i","this","winningSquares","includes","squares","j","push","renderSquare","n","rows","k","renderRow","renderRows","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","location","step","lines","a","b","c","status","current","winner","calculateWinningSquares","moves","map","move","desc","jumpTo","handleClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.56a7d8b4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Square(props) {\r\n    return (\r\n        <button\r\n            className={\r\n                'square' + (props.isWinningSquare ? ' square-winning' : '')\r\n            }\r\n            onClick={props.onClick}\r\n        >\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport Square from './square';\r\n\r\nclass Board extends React.Component {\r\n    renderSquare(i) {\r\n        return (\r\n            <Square\r\n                key={'square #' + i}\r\n                isWinningSquare={this.props.winningSquares.includes(i)}\r\n                value={this.props.squares[i]}\r\n                onClick={() => this.props.onClick(i)}\r\n            />\r\n        );\r\n    }\r\n\r\n        \r\n    renderRow(i) { // i - index of the square to be rendered currently\r\n        let squares = []; // start out with an empty array that in the end will be returned\r\n        for (let j = i; j < i + 3; j++) { // 3 squares in 1 row\r\n            squares.push(this.renderSquare(j));\r\n        }\r\n        return squares;\r\n    }\r\n\r\n    renderRows(n) { // n - number of rows you would like to render\r\n        let rows = [];\r\n        for (let k = 0; k < 3 * n; k+=3) { // 3 rows, 3 squares each\r\n            rows.push(<div className=\"board-row\" key={'row #' + k}>{this.renderRow(k)}</div>);\r\n        }\r\n        return rows;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderRows(3)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Board from './board';\r\nimport './index.css';\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history: [\r\n                {\r\n                    squares: Array(9).fill(null),\r\n                },\r\n            ],\r\n            stepNumber: 0,\r\n            xIsNext: true,\r\n        };\r\n    }\r\n\r\n    handleClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        if (calculateWinner(squares) || squares[i]) {\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        this.setState({\r\n            history: history.concat([\r\n                {\r\n                    squares: squares,\r\n                    location: i,\r\n                },\r\n            ]),\r\n            stepNumber: history.length,\r\n            xIsNext: !this.state.xIsNext,\r\n        });\r\n    }\r\n\r\n    jumpTo(step) {\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: step % 2 === 0, // all moves with even index are 'X' moves\r\n        });\r\n    }\r\n\r\n    calculateWinningSquares(squares) {\r\n        const lines = [\r\n            [0, 1, 2],\r\n            [3, 4, 5],\r\n            [6, 7, 8],\r\n            [0, 3, 6],\r\n            [1, 4, 7],\r\n            [2, 5, 8],\r\n            [0, 4, 8],\r\n            [2, 4, 6],\r\n        ];\r\n        for (let i = 0; i < lines.length; i++) {\r\n            const [a, b, c] = lines[i];\r\n            if (\r\n                squares[a] &&\r\n                squares[a] === squares[b] &&\r\n                squares[a] === squares[c]\r\n            ) {\r\n                return [a, b, c];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = calculateWinner(current.squares);\r\n        const winningSquares = this.calculateWinningSquares(current.squares);\r\n\r\n        const moves = history.map((step, move) => {\r\n            let col = () => {\r\n                if ([0, 3, 6].includes(step.location)) {\r\n                    return 1;\r\n                } else if ([1, 4, 7].includes(step.location)) {\r\n                    return 2;\r\n                } else if ([2, 5, 8].includes(step.location)) {\r\n                    return 3;\r\n                }\r\n            };\r\n\r\n            let row = () => {\r\n                if ([0, 1, 2].includes(step.location)) {\r\n                    return 1;\r\n                } else if ([3, 4, 5].includes(step.location)) {\r\n                    return 2;\r\n                } else if ([6, 7, 8].includes(step.location)) {\r\n                    return 3;\r\n                }\r\n            };\r\n            const desc = move // button description\r\n                ? `Go to move #${move}\r\n                (col: ${col()}, row: ${row()})`\r\n                : `Go to game start`;\r\n            return (\r\n                // sequential number of the move as a key - key should be unique, like id attribute\r\n                <li key={move}>\r\n                    <button onClick={() => this.jumpTo(move)}>\r\n                        {this.state.stepNumber === move ? (\r\n                            <strong>{desc}</strong>\r\n                        ) : (\r\n                            desc\r\n                        )}\r\n                    </button>\r\n                </li>\r\n                // regular if-else statements doesn't work inside JSX, but ternary operator do,\r\n                // also you can nest the jsx inside of an if-else expression, or use && operator.\r\n                // && evaluates only when the condition evaluates to true. {x && y} will render y only when x is true\r\n            );\r\n        });\r\n\r\n        let status;\r\n        if (winner) {\r\n            status = `Winner: ${winner}`;\r\n        } else {\r\n            status = `Next player: ${this.state.xIsNext ? 'X' : 'O'}`;\r\n        }\r\n\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board\r\n                        winningSquares={winner ? winningSquares : []}\r\n                        squares={current.squares}\r\n                        onClick={(i) => this.handleClick(i)}\r\n                    />\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <h1>tic-tac-toe</h1>\r\n                    <div className={winner && 'winner'}>{status}</div>\r\n                    <ul>{moves}</ul>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(<Game />, document.getElementById('root'));\r\n\r\nfunction calculateWinner(squares) {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (\r\n            squares[a] &&\r\n            squares[a] === squares[b] &&\r\n            squares[a] === squares[c]\r\n        ) {\r\n            return squares[a];\r\n        }\r\n    }\r\n    return null;\r\n}\r\n"],"sourceRoot":""}