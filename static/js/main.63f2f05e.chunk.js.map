{"version":3,"sources":["index.js"],"names":["Square","props","className","isWinningSquare","onClick","value","Board","i","this","winningSquares","includes","squares","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","location","step","lines","a","b","c","status","current","winner","calculateWinningSquares","moves","map","move","desc","jumpTo","handleClick","ReactDOM","render","document","getElementById"],"mappings":"oOAIA,SAASA,EAAOC,GACZ,OACI,wBACIC,UACI,WAAaD,EAAME,gBAAkB,iBAAmB,MAE5DC,QAASH,EAAMG,QAJnB,SAMKH,EAAMI,Q,IAKbC,E,kKACF,SAAaC,GAAI,IAAD,OACZ,OACI,cAACP,EAAD,CACIG,gBAAiBK,KAAKP,MAAMQ,eAAeC,SAASH,GACpDF,MAAOG,KAAKP,MAAMU,QAAQJ,GAC1BH,QAAS,kBAAM,EAAKH,MAAMG,QAAQG,Q,oBAK9C,WACI,OACI,gCACI,sBAAKL,UAAU,YAAf,UACKM,KAAKI,aAAa,GAClBJ,KAAKI,aAAa,GAClBJ,KAAKI,aAAa,MAEvB,sBAAKV,UAAU,YAAf,UACKM,KAAKI,aAAa,GAClBJ,KAAKI,aAAa,GAClBJ,KAAKI,aAAa,MAEvB,sBAAKV,UAAU,YAAf,UACKM,KAAKI,aAAa,GAClBJ,KAAKI,aAAa,GAClBJ,KAAKI,aAAa,a,GA3BnBC,IAAMC,WAkCpBC,E,kDACF,WAAYd,GAAQ,IAAD,8BACf,cAAMA,IACDe,MAAQ,CACTC,QAAS,CACL,CACIN,QAASO,MAAM,GAAGC,KAAK,QAG/BC,WAAY,EACZC,SAAS,GATE,E,+CAanB,SAAYd,GACR,IAAMU,EAAUT,KAAKQ,MAAMC,QAAQK,MAAM,EAAGd,KAAKQ,MAAMI,WAAa,GAE9DT,EADUM,EAAQA,EAAQM,OAAS,GACjBZ,QAAQW,QAC5BE,EAAgBb,IAAYA,EAAQJ,KAGxCI,EAAQJ,GAAKC,KAAKQ,MAAMK,QAAU,IAAM,IACxCb,KAAKiB,SAAS,CACVR,QAASA,EAAQS,OAAO,CACpB,CACIf,QAASA,EACTgB,SAAUpB,KAGlBa,WAAYH,EAAQM,OACpBF,SAAUb,KAAKQ,MAAMK,a,oBAI7B,SAAOO,GACHpB,KAAKiB,SAAS,CACVL,WAAYQ,EACZP,QAASO,EAAO,IAAM,M,qCAI9B,SAAwBjB,GAWpB,IAVA,IAAMkB,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEFtB,EAAI,EAAGA,EAAIsB,EAAMN,OAAQhB,IAAK,CACnC,kBAAkBsB,EAAMtB,GAAxB,GAAOuB,EAAP,KAAUC,EAAV,KAAaC,EAAb,KACA,GACIrB,EAAQmB,IACRnB,EAAQmB,KAAOnB,EAAQoB,IACvBpB,EAAQmB,KAAOnB,EAAQqB,GAEvB,MAAO,CAACF,EAAGC,EAAGC,GAGtB,OAAO,O,oBAGX,WAAU,IA6CFC,EA7CC,OACChB,EAAUT,KAAKQ,MAAMC,QACrBiB,EAAUjB,EAAQT,KAAKQ,MAAMI,YAC7Be,EAASX,EAAgBU,EAAQvB,SACjCF,EAAiBD,KAAK4B,wBAAwBF,EAAQvB,SAEtD0B,EAAQpB,EAAQqB,KAAI,SAACV,EAAMW,GAC7B,IAmBMC,EAAOD,EAAI,sBACIA,EADJ,mCAlBT,CAAC,EAAG,EAAG,GAAG7B,SAASkB,EAAKD,UACjB,EACA,CAAC,EAAG,EAAG,GAAGjB,SAASkB,EAAKD,UACxB,EACA,CAAC,EAAG,EAAG,GAAGjB,SAASkB,EAAKD,UACxB,OADJ,EAcM,kBART,CAAC,EAAG,EAAG,GAAGjB,SAASkB,EAAKD,UACjB,EACA,CAAC,EAAG,EAAG,GAAGjB,SAASkB,EAAKD,UACxB,EACA,CAAC,EAAG,EAAG,GAAGjB,SAASkB,EAAKD,UACxB,OADJ,EAIM,wBAIjB,OAEI,aADA,CACA,eACI,wBAAQvB,QAAS,kBAAM,EAAKqC,OAAOF,IAAnC,SACK,EAAKvB,MAAMI,aAAemB,EACvB,iCAASC,IAETA,KALHD,MAoBjB,OALIN,EADAE,EACM,kBAAcA,GAEd,uBAAmB3B,KAAKQ,MAAMK,QAAU,IAAM,KAIpD,sBAAKnB,UAAU,OAAf,UACI,qBAAKA,UAAU,aAAf,SACI,cAACI,EAAD,CACIG,eAAgB0B,EAAS1B,EAAiB,GAC1CE,QAASuB,EAAQvB,QACjBP,QAAS,SAACG,GAAD,OAAO,EAAKmC,YAAYnC,QAGzC,sBAAKL,UAAU,YAAf,UACI,8BAAM+B,IACN,6BAAKI,c,GAhINxB,IAAMC,WA2IzB,SAASU,EAAgBb,GAWrB,IAVA,IAAMkB,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEFtB,EAAI,EAAGA,EAAIsB,EAAMN,OAAQhB,IAAK,CACnC,kBAAkBsB,EAAMtB,GAAxB,GAAOuB,EAAP,KAAUC,EAAV,KAAaC,EAAb,KACA,GACIrB,EAAQmB,IACRnB,EAAQmB,KAAOnB,EAAQoB,IACvBpB,EAAQmB,KAAOnB,EAAQqB,GAEvB,OAAOrB,EAAQmB,GAGvB,OAAO,KAvBXa,IAASC,OAAO,cAAC7B,EAAD,IAAU8B,SAASC,eAAe,W","file":"static/js/main.63f2f05e.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n    return (\r\n        <button\r\n            className={\r\n                'square ' + (props.isWinningSquare ? 'square-winning' : null)\r\n            }\r\n            onClick={props.onClick}\r\n        >\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n\r\nclass Board extends React.Component {\r\n    renderSquare(i) {\r\n        return (\r\n            <Square\r\n                isWinningSquare={this.props.winningSquares.includes(i)}\r\n                value={this.props.squares[i]}\r\n                onClick={() => this.props.onClick(i)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(0)}\r\n                    {this.renderSquare(1)}\r\n                    {this.renderSquare(2)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(3)}\r\n                    {this.renderSquare(4)}\r\n                    {this.renderSquare(5)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(6)}\r\n                    {this.renderSquare(7)}\r\n                    {this.renderSquare(8)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history: [\r\n                {\r\n                    squares: Array(9).fill(null),\r\n                },\r\n            ],\r\n            stepNumber: 0,\r\n            xIsNext: true,\r\n        };\r\n    }\r\n\r\n    handleClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        if (calculateWinner(squares) || squares[i]) {\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        this.setState({\r\n            history: history.concat([\r\n                {\r\n                    squares: squares,\r\n                    location: i,\r\n                },\r\n            ]),\r\n            stepNumber: history.length,\r\n            xIsNext: !this.state.xIsNext,\r\n        });\r\n    }\r\n\r\n    jumpTo(step) {\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: step % 2 === 0, // all moves with even index are 'X' moves\r\n        });\r\n    }\r\n\r\n    calculateWinningSquares(squares) {\r\n        const lines = [\r\n            [0, 1, 2],\r\n            [3, 4, 5],\r\n            [6, 7, 8],\r\n            [0, 3, 6],\r\n            [1, 4, 7],\r\n            [2, 5, 8],\r\n            [0, 4, 8],\r\n            [2, 4, 6],\r\n        ];\r\n        for (let i = 0; i < lines.length; i++) {\r\n            const [a, b, c] = lines[i];\r\n            if (\r\n                squares[a] &&\r\n                squares[a] === squares[b] &&\r\n                squares[a] === squares[c]\r\n            ) {\r\n                return [a, b, c];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = calculateWinner(current.squares);\r\n        const winningSquares = this.calculateWinningSquares(current.squares);\r\n\r\n        const moves = history.map((step, move) => {\r\n            let col = () => {\r\n                if ([0, 3, 6].includes(step.location)) {\r\n                    return 1;\r\n                } else if ([1, 4, 7].includes(step.location)) {\r\n                    return 2;\r\n                } else if ([2, 5, 8].includes(step.location)) {\r\n                    return 3;\r\n                }\r\n            };\r\n\r\n            let row = () => {\r\n                if ([0, 1, 2].includes(step.location)) {\r\n                    return 1;\r\n                } else if ([3, 4, 5].includes(step.location)) {\r\n                    return 2;\r\n                } else if ([6, 7, 8].includes(step.location)) {\r\n                    return 3;\r\n                }\r\n            };\r\n            const desc = move // button description\r\n                ? `Go to move #${move}\r\n                (col: ${col()}, row: ${row()})`\r\n                : `Go to game start`;\r\n            return (\r\n                // sequential number of the move as a key\r\n                <li key={move}>\r\n                    <button onClick={() => this.jumpTo(move)}>\r\n                        {this.state.stepNumber === move ? (\r\n                            <strong>{desc}</strong>\r\n                        ) : (\r\n                            desc\r\n                        )}\r\n                    </button>\r\n                </li>\r\n                // if-else statements doesn't work inside JSX, but ternary operator do\r\n            );\r\n        });\r\n\r\n        let status;\r\n        if (winner) {\r\n            status = `Winner: ${winner}`;\r\n        } else {\r\n            status = `Next player: ${this.state.xIsNext ? 'X' : 'O'}`;\r\n        }\r\n\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board\r\n                        winningSquares={winner ? winningSquares : []}\r\n                        squares={current.squares}\r\n                        onClick={(i) => this.handleClick(i)}\r\n                    />\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <div>{status}</div>\r\n                    <ol>{moves}</ol>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(<Game />, document.getElementById('root'));\r\n\r\nfunction calculateWinner(squares) {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (\r\n            squares[a] &&\r\n            squares[a] === squares[b] &&\r\n            squares[a] === squares[c]\r\n        ) {\r\n            return squares[a];\r\n        }\r\n    }\r\n    return null;\r\n}\r\n"],"sourceRoot":""}